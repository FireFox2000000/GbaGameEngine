# This script is used to dynamically update GameFiles.h just before compiling. 
# Searches through a list of directories for data files we want included in the build. 

InputDirectory=$1
OutputFile=$2

IncludesArr=()
FileMacrosArr=()

# Collect all the files in the folders found in the input directory. Ignore files that are not in a sub-folder.
AllFiles=()
for d in $InputDirectory/*/ ; do
    for file in "$d"*.cpp ; do
        AllFiles+=($file)
    done
done

# Sort the files alphabetically. File system will rely on this for binary search.
IFS=$'\n' AllFiles=($(sort <<<"${AllFiles[*]}")); unset IFS

for file in "${AllFiles[@]}" ; do
    # Get the filepath without the extention. We don't need it.
    pathAndFileWoExtention=$(echo "$file" | cut -f 1 -d '.')
    pathAndFileWoExtentionStrippedSrc=${pathAndFileWoExtention#"src/"}
    includeLine="#include \""$pathAndFileWoExtentionStrippedSrc".h\""
    IncludesArr+=("$includeLine")

    # Get just the file by itself without path or extention
    fileWoExtention=$(basename $pathAndFileWoExtention)
    baseDir=${pathAndFileWoExtention#"$InputDirectory/"}
    baseDir=$(echo "$baseDir" | cut -f 1 -d '/')
    FileMacrosArr+=("FILE($baseDir, $fileWoExtention)\\")
done

IncludesStr=""
for include in "${IncludesArr[@]}" ; do
    IncludesStr="$IncludesStr
$include"
done

MacroStr=""
for fileMacro in "${FileMacrosArr[@]}" ; do
    MacroStr="$MacroStr
$fileMacro"
done

# Write the output to a temp file. Only update the output file if we have actual differences, otherwise we'll keep recompiling it.
Tmpfile=$(mktemp /tmp/update_gamefiles.XXXXXX)

# Write to the output file
cat << EOF > $Tmpfile
// This file was generated by update_gamefiles.sh
#pragma once
$IncludesStr

#define ALL_FILES()\\$MacroStr
//
EOF
# End writing the output file

if cmp -s "$Tmpfile" "$OutputFile"; then
    # The file is out of date. Override with the new file.
    printf '"%s" is up to date.\n' "$OutputFile"
else
    printf 'Building "%s"\n' "$OutputFile"
    cp $Tmpfile $OutputFile
fi

rm "$Tmpfile"
